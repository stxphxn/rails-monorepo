/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type SwapDataStruct = {
  buyer: string;
  seller: string;
  oracle: string;
  assetId: string;
  amount: BigNumberish;
  swapId: BigNumberish;
  currencyHash: string;
  prepareBlockNumber: BigNumberish;
  expiry: BigNumberish;
};

export type SwapDataStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber
] & {
  buyer: string;
  seller: string;
  oracle: string;
  assetId: string;
  amount: BigNumber;
  swapId: BigNumber;
  currencyHash: string;
  prepareBlockNumber: BigNumber;
  expiry: BigNumber;
};

export type SwapInfoStruct = {
  buyer: string;
  seller: string;
  oracle: string;
  assetId: string;
  amount: BigNumberish;
  swapId: BigNumberish;
  currencyHash: string;
};

export type SwapInfoStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  buyer: string;
  seller: string;
  oracle: string;
  assetId: string;
  amount: BigNumber;
  swapId: BigNumber;
  currencyHash: string;
};

export interface IRailsEscrowInterface extends ethers.utils.Interface {
  functions: {
    "addAssetId(address)": FunctionFragment;
    "addLiquidity(uint256,address)": FunctionFragment;
    "addSeller(address)": FunctionFragment;
    "cancel((address,address,address,address,uint256,uint256,string,uint256,uint256),bytes)": FunctionFragment;
    "fulfil((address,address,address,address,uint256,uint256,string,uint256,uint256),bytes)": FunctionFragment;
    "getSwapHash((address,address,address,address,uint256,uint256,string,uint256,uint256))": FunctionFragment;
    "getSwapStatus((address,address,address,address,uint256,uint256,string))": FunctionFragment;
    "prepare((address,address,address,address,uint256,uint256,string),bytes)": FunctionFragment;
    "removeAssetId(address)": FunctionFragment;
    "removeLiquidity(uint256,address)": FunctionFragment;
    "removeSeller(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAssetId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "addSeller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [SwapDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfil",
    values: [SwapDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapHash",
    values: [SwapDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapStatus",
    values: [SwapInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "prepare",
    values: [SwapInfoStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSeller",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prepare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSeller",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(address,address)": EventFragment;
    "AssetRemoved(address,address)": EventFragment;
    "LiquidityAdded(address,address,uint256,address)": EventFragment;
    "LiquidityRemoved(address,address,uint256,address)": EventFragment;
    "SellerAdded(address,address)": EventFragment;
    "SellerRemoved(address,address)": EventFragment;
    "SwapCancelled(bytes32,tuple,address)": EventFragment;
    "SwapFulfiled(bytes32,tuple,address)": EventFragment;
    "SwapPrepared(bytes32,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFulfiled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPrepared"): EventFragment;
}

export type AssetAddedEvent = TypedEvent<
  [string, string],
  { addedAssetId: string; caller: string }
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export type AssetRemovedEvent = TypedEvent<
  [string, string],
  { removedAssetId: string; caller: string }
>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { seller: string; assetId: string; amount: BigNumber; caller: string }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { seller: string; assetId: string; amount: BigNumber; recipient: string }
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export type SellerAddedEvent = TypedEvent<
  [string, string],
  { addedSeller: string; caller: string }
>;

export type SellerAddedEventFilter = TypedEventFilter<SellerAddedEvent>;

export type SellerRemovedEvent = TypedEvent<
  [string, string],
  { removedSeller: string; caller: string }
>;

export type SellerRemovedEventFilter = TypedEventFilter<SellerRemovedEvent>;

export type SwapCancelledEvent = TypedEvent<
  [string, SwapDataStructOutput, string],
  { swapHash: string; swapData: SwapDataStructOutput; caller: string }
>;

export type SwapCancelledEventFilter = TypedEventFilter<SwapCancelledEvent>;

export type SwapFulfiledEvent = TypedEvent<
  [string, SwapDataStructOutput, string],
  { swapHash: string; swapData: SwapDataStructOutput; caller: string }
>;

export type SwapFulfiledEventFilter = TypedEventFilter<SwapFulfiledEvent>;

export type SwapPreparedEvent = TypedEvent<
  [string, SwapDataStructOutput, string],
  { swapHash: string; swapData: SwapDataStructOutput; caller: string }
>;

export type SwapPreparedEventFilter = TypedEventFilter<SwapPreparedEvent>;

export interface IRailsEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRailsEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      swapData: SwapDataStruct,
      cancelSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfil(
      swapData: SwapDataStruct,
      fulfilSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSwapHash(
      swapData: SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapStatus(
      swapInfo: SwapInfoStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { status: string }>;

    prepare(
      swapInfo: SwapInfoStruct,
      prepareSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAssetId(
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    amount: BigNumberish,
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeller(
    seller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    swapData: SwapDataStruct,
    cancelSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfil(
    swapData: SwapDataStruct,
    fulfilSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSwapHash(
    swapData: SwapDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapStatus(
    swapInfo: SwapInfoStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  prepare(
    swapInfo: SwapInfoStruct,
    prepareSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAssetId(
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSeller(
    seller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAssetId(assetId: string, overrides?: CallOverrides): Promise<void>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSeller(seller: string, overrides?: CallOverrides): Promise<void>;

    cancel(
      swapData: SwapDataStruct,
      cancelSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfil(
      swapData: SwapDataStruct,
      fulfilSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getSwapHash(
      swapData: SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapStatus(
      swapInfo: SwapInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    prepare(
      swapInfo: SwapInfoStruct,
      prepareSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<SwapDataStructOutput>;

    removeAssetId(assetId: string, overrides?: CallOverrides): Promise<void>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSeller(seller: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetAdded(address,address)"(
      addedAssetId?: string | null,
      caller?: string | null
    ): AssetAddedEventFilter;
    AssetAdded(
      addedAssetId?: string | null,
      caller?: string | null
    ): AssetAddedEventFilter;

    "AssetRemoved(address,address)"(
      removedAssetId?: string | null,
      caller?: string | null
    ): AssetRemovedEventFilter;
    AssetRemoved(
      removedAssetId?: string | null,
      caller?: string | null
    ): AssetRemovedEventFilter;

    "LiquidityAdded(address,address,uint256,address)"(
      seller?: string | null,
      assetId?: string | null,
      amount?: null,
      caller?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      seller?: string | null,
      assetId?: string | null,
      amount?: null,
      caller?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,address,uint256,address)"(
      seller?: string | null,
      assetId?: string | null,
      amount?: null,
      recipient?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      seller?: string | null,
      assetId?: string | null,
      amount?: null,
      recipient?: null
    ): LiquidityRemovedEventFilter;

    "SellerAdded(address,address)"(
      addedSeller?: string | null,
      caller?: string | null
    ): SellerAddedEventFilter;
    SellerAdded(
      addedSeller?: string | null,
      caller?: string | null
    ): SellerAddedEventFilter;

    "SellerRemoved(address,address)"(
      removedSeller?: string | null,
      caller?: string | null
    ): SellerRemovedEventFilter;
    SellerRemoved(
      removedSeller?: string | null,
      caller?: string | null
    ): SellerRemovedEventFilter;

    "SwapCancelled(bytes32,tuple,address)"(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): SwapCancelledEventFilter;
    SwapCancelled(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): SwapCancelledEventFilter;

    "SwapFulfiled(bytes32,tuple,address)"(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): SwapFulfiledEventFilter;
    SwapFulfiled(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): SwapFulfiledEventFilter;

    "SwapPrepared(bytes32,tuple,address)"(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): SwapPreparedEventFilter;
    SwapPrepared(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): SwapPreparedEventFilter;
  };

  estimateGas: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      swapData: SwapDataStruct,
      cancelSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfil(
      swapData: SwapDataStruct,
      fulfilSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSwapHash(
      swapData: SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapStatus(
      swapInfo: SwapInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepare(
      swapInfo: SwapInfoStruct,
      prepareSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      swapData: SwapDataStruct,
      cancelSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfil(
      swapData: SwapDataStruct,
      fulfilSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSwapHash(
      swapData: SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapStatus(
      swapInfo: SwapInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepare(
      swapInfo: SwapInfoStruct,
      prepareSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
