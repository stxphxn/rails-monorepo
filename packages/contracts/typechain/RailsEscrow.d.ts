/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RailsEscrowInterface extends ethers.utils.Interface {
  functions: {
    "addAssetId(address)": FunctionFragment;
    "addLiquidity(uint256,address)": FunctionFragment;
    "addSeller(address)": FunctionFragment;
    "approvedAssets(address)": FunctionFragment;
    "approvedSellers(address)": FunctionFragment;
    "cancel(tuple,bytes)": FunctionFragment;
    "fulfil(tuple,bytes)": FunctionFragment;
    "getSwapHash(tuple)": FunctionFragment;
    "getSwapStatus(tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "prepare(tuple)": FunctionFragment;
    "removeAssetId(address)": FunctionFragment;
    "removeLiquidity(uint256,address)": FunctionFragment;
    "removeSeller(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellerBalances(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAssetId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "addSeller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approvedAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSellers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfil",
    values: [
      {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapHash",
    values: [
      {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapStatus",
    values: [
      {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepare",
    values: [
      {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSeller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSeller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSellers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(address,address)": EventFragment;
    "AssetRemoved(address,address)": EventFragment;
    "LiquidityAdded(address,address,uint256,address)": EventFragment;
    "LiquidityRemoved(address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SellerAdded(address,address)": EventFragment;
    "SellerRemoved(address,address)": EventFragment;
    "SwapCancelled(bytes32,tuple,address)": EventFragment;
    "SwapFulfiled(bytes32,tuple,address)": EventFragment;
    "SwapPrepared(bytes32,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFulfiled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPrepared"): EventFragment;
}

export class RailsEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RailsEscrowInterface;

  functions: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedAssets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    approvedSellers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancel(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      cancelSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfil(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      fulfilSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSwapHash(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapStatus(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: CallOverrides
    ): Promise<[string] & { status: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prepare(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAssetId(
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    amount: BigNumberish,
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeller(
    seller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedAssets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approvedSellers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cancel(
    swapData: {
      buyer: string;
      seller: string;
      oracle: string;
      assetId: string;
      amount: BigNumberish;
      swapId: BigNumberish;
      currencyHash: string;
      prepareBlockNumber: BigNumberish;
      expiry: BigNumberish;
    },
    cancelSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfil(
    swapData: {
      buyer: string;
      seller: string;
      oracle: string;
      assetId: string;
      amount: BigNumberish;
      swapId: BigNumberish;
      currencyHash: string;
      prepareBlockNumber: BigNumberish;
      expiry: BigNumberish;
    },
    fulfilSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSwapHash(
    swapData: {
      buyer: string;
      seller: string;
      oracle: string;
      assetId: string;
      amount: BigNumberish;
      swapId: BigNumberish;
      currencyHash: string;
      prepareBlockNumber: BigNumberish;
      expiry: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapStatus(
    swapInfo: {
      buyer: string;
      seller: string;
      oracle: string;
      assetId: string;
      amount: BigNumberish;
      swapId: BigNumberish;
      currencyHash: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  prepare(
    swapInfo: {
      buyer: string;
      seller: string;
      oracle: string;
      assetId: string;
      amount: BigNumberish;
      swapId: BigNumberish;
      currencyHash: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAssetId(
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSeller(
    seller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellerBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAssetId(assetId: string, overrides?: CallOverrides): Promise<void>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSeller(seller: string, overrides?: CallOverrides): Promise<void>;

    approvedAssets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approvedSellers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cancel(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      cancelSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfil(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      fulfilSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getSwapHash(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapStatus(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prepare(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumber;
        swapId: BigNumber;
        currencyHash: string;
        prepareBlockNumber: BigNumber;
        expiry: BigNumber;
      }
    >;

    removeAssetId(assetId: string, overrides?: CallOverrides): Promise<void>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSeller(seller: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AssetAdded(
      addedAssetId?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { addedAssetId: string; caller: string }
    >;

    AssetRemoved(
      removedAssetId?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { removedAssetId: string; caller: string }
    >;

    LiquidityAdded(
      seller?: string | null,
      assetId?: string | null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { seller: string; assetId: string; amount: BigNumber; caller: string }
    >;

    LiquidityRemoved(
      seller?: string | null,
      assetId?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { seller: string; assetId: string; amount: BigNumber; recipient: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    SellerAdded(
      addedSeller?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { addedSeller: string; caller: string }
    >;

    SellerRemoved(
      removedSeller?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { removedSeller: string; caller: string }
    >;

    SwapCancelled(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          oracle: string;
          assetId: string;
          amount: BigNumber;
          swapId: BigNumber;
          currencyHash: string;
          prepareBlockNumber: BigNumber;
          expiry: BigNumber;
        },
        string
      ],
      {
        swapHash: string;
        swapData: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          oracle: string;
          assetId: string;
          amount: BigNumber;
          swapId: BigNumber;
          currencyHash: string;
          prepareBlockNumber: BigNumber;
          expiry: BigNumber;
        };
        caller: string;
      }
    >;

    SwapFulfiled(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          oracle: string;
          assetId: string;
          amount: BigNumber;
          swapId: BigNumber;
          currencyHash: string;
          prepareBlockNumber: BigNumber;
          expiry: BigNumber;
        },
        string
      ],
      {
        swapHash: string;
        swapData: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          oracle: string;
          assetId: string;
          amount: BigNumber;
          swapId: BigNumber;
          currencyHash: string;
          prepareBlockNumber: BigNumber;
          expiry: BigNumber;
        };
        caller: string;
      }
    >;

    SwapPrepared(
      swapHash?: null,
      swapData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          oracle: string;
          assetId: string;
          amount: BigNumber;
          swapId: BigNumber;
          currencyHash: string;
          prepareBlockNumber: BigNumber;
          expiry: BigNumber;
        },
        string
      ],
      {
        swapHash: string;
        swapData: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          oracle: string;
          assetId: string;
          amount: BigNumber;
          swapId: BigNumber;
          currencyHash: string;
          prepareBlockNumber: BigNumber;
          expiry: BigNumber;
        };
        caller: string;
      }
    >;
  };

  estimateGas: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedAssets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approvedSellers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      cancelSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfil(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      fulfilSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSwapHash(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapStatus(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepare(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedSellers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      cancelSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfil(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      fulfilSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSwapHash(
      swapData: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
        prepareBlockNumber: BigNumberish;
        expiry: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapStatus(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepare(
      swapInfo: {
        buyer: string;
        seller: string;
        oracle: string;
        assetId: string;
        amount: BigNumberish;
        swapId: BigNumberish;
        currencyHash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSeller(
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
